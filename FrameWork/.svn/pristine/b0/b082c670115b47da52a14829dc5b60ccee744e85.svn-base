using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using System.Text.RegularExpressions;
using System.ComponentModel;
using System.Drawing;

namespace FrameWork
{
    [ToolboxItem(true)]
    [ToolboxBitmap(typeof(TextBox))]
    public class AcisTextBox : TextBox
    {
        private InputLanguage arabic;
        private InputLanguage english;

        public MyTypes InPutType { get; set; }
        public int MaxNumber { get; set; }
        public int MinNumber { get; set; }

        protected override void OnKeyPress(KeyPressEventArgs e)
        {
            if ((Keys)e.KeyChar == Keys.Back) return;
            switch (InPutType)
            {
                case MyTypes.ArabicNumberWithNoSpace:
                    if (!IsArabicCharacter(e.KeyChar) && !System.Text.RegularExpressions.Regex.IsMatch(e.KeyChar.ToString(), "[0-9]"))
                        e.Handled = true;
                    break;

                case MyTypes.ArabicOnlyWithNoSpace:
                    if (!IsArabicCharacter(e.KeyChar))
                        e.Handled = true;
                    break;

                case MyTypes.ArabicOnlyWithSpace:
                    if (!IsArabicCharacter(e.KeyChar) && (Keys)e.KeyChar != Keys.Space)
                        e.Handled = true;
                    break;

                case MyTypes.ArabicNumberWithSpace:
                    if (!IsArabicCharacter(e.KeyChar) && (Keys)e.KeyChar != Keys.Space && !System.Text.RegularExpressions.Regex.IsMatch(e.KeyChar.ToString(), "[0-9]"))
                        e.Handled = true;
                    break;

                case MyTypes.EnglishOnlyWithSpace:
                    if (!System.Text.RegularExpressions.Regex.IsMatch(e.KeyChar.ToString(), "[A-Za-z]") && (Keys)e.KeyChar != Keys.Space)
                        e.Handled = true;
                    break;

                case MyTypes.EnglishNumberWithSpace:
                    if (!System.Text.RegularExpressions.Regex.IsMatch(e.KeyChar.ToString(), "[A-Za-z0-9]") && (Keys)e.KeyChar != Keys.Space)
                        e.Handled = true;
                    break;

                case MyTypes.EnglishNumberWithNoSpace:
                    if (!System.Text.RegularExpressions.Regex.IsMatch(e.KeyChar.ToString(), "[A-Za-z0-9]"))
                        e.Handled = true;
                    break;

                case MyTypes.EnglishOnlyWithNoSpace:
                    if (!System.Text.RegularExpressions.Regex.IsMatch(e.KeyChar.ToString(), "[A-Za-z]"))
                        e.Handled = true;
                    break;

                case MyTypes.Number:
                    if (!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar))
                        e.Handled = true;
                    break;

                case MyTypes.LetterOnly:
                    if (!char.IsControl(e.KeyChar) && !char.IsLetter(e.KeyChar))
                        e.Handled = true;
                    break;

                case MyTypes.StringNoSpace:
                    if (!char.IsControl(e.KeyChar) && !char.IsLetterOrDigit(e.KeyChar))
                        e.Handled = true;
                    break;

                case MyTypes.String:
                    break;

                case MyTypes.Decimal:
                    if (Char.IsDigit(e.KeyChar) || e.KeyChar == '\b')
                    {
                    }
                    else if (e.KeyChar == '.' && !Text.Contains('.'))
                    {
                    }
                    else
                    {
                        e.Handled = true;
                    }
                    break;
            }
            base.OnKeyPress(e);
        }

        protected override void OnLeave(EventArgs e)
        {
            if (InPutType == MyTypes.Number)
            {
                try
                {
                    if (Int64.Parse(Text) < MinNumber)
                    {
                        Text = MinNumber.ToString();
                        return;
                    }
                    if (Int64.Parse(Text) > MaxNumber)
                    {
                        Text = MaxNumber.ToString();
                        return;
                    }
                }
                catch
                {
                    if (string.IsNullOrEmpty(Text)) return;
                    Text = MaxNumber.ToString();
                }
            }
            base.OnLeave(e);
        }

        public AcisTextBox()
        {
            InPutType = MyTypes.String;
            MinNumber = 150;
            MaxNumber = 214783648;

            arabic = InputLanguage.CurrentInputLanguage;
            english = InputLanguage.CurrentInputLanguage;
            int count = InputLanguage.InstalledInputLanguages.Count;
            for (int i = 0; i <= count - 1; i++)
            {
                if (InputLanguage.InstalledInputLanguages[i].LayoutName.Contains("Arabic"))
                {
                    arabic = InputLanguage.InstalledInputLanguages[i];
                }
                if (InputLanguage.InstalledInputLanguages[i].LayoutName.Contains("English"))
                {
                    english = InputLanguage.InstalledInputLanguages[i];
                }
            }
        }

        protected override void OnCreateControl()
        {
            base.OnCreateControl();
        }

        protected override void OnEnter(EventArgs e)
        {
            switch (InPutType)
            {
                case MyTypes.EnglishNumberWithSpace:
                case MyTypes.EnglishOnlyWithSpace:
                case MyTypes.EnglishOnlyWithNoSpace:
                case MyTypes.EnglishNumberWithNoSpace:
                    InputLanguage.CurrentInputLanguage = english;
                    this.RightToLeft = System.Windows.Forms.RightToLeft.No;
                    break;

                case MyTypes.ArabicNumberWithNoSpace:
                case MyTypes.ArabicNumberWithSpace:
                case MyTypes.ArabicOnlyWithNoSpace:
                case MyTypes.ArabicOnlyWithSpace:
                    InputLanguage.CurrentInputLanguage = arabic;
                    this.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
                    break;




            }
            base.OnEnter(e);
        }

        private bool IsArabicCharacter(Char character)
        {
            if (character >= 0x600 && character <= 0x6ff)
                return true;
            if (character >= 0x750 && character <= 0x77f)
                return true;
            if (character >= 0xfb50 && character <= 0xfc3f)
                return true;
            if (character >= 0xfe70 && character <= 0xfefc)
                return true;

            return false;
        }
    }

    public enum MyTypes { Number, LetterOnly, Decimal, String, StringNoSpace, EnglishOnlyWithSpace, EnglishOnlyWithNoSpace, EnglishNumberWithNoSpace, EnglishNumberWithSpace, ArabicOnlyWithSpace, ArabicOnlyWithNoSpace, ArabicNumberWithSpace, ArabicNumberWithNoSpace }


}